name: authentik

services:

  authentik-db:
    container_name: ${COMPOSE_PROJECT_NAME}-db
    image: postgres:${AUTHENTIK_DB_TAG:-12-alpine}
    restart: unless-stopped
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /srv/${COMPOSE_PROJECT_NAME}/db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-${COMPOSE_PROJECT_NAME}}
      POSTGRES_DB: ${PG_DB:-${COMPOSE_PROJECT_NAME}}
    env_file:
      - stack.env

  authentik-kv:
    container_name: ${COMPOSE_PROJECT_NAME}-kv
    image: valkey/valkey:${AUTHENTIK_KV_TAG:-alpine}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /srv/${COMPOSE_PROJECT_NAME}/kv:/data

  authentik-server:
    container_name: ${COMPOSE_PROJECT_NAME}-server
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-latest}
    restart: unless-stopped
    networks:
      - default
      - proxy
      - smtp
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: ${COMPOSE_PROJECT_NAME}-kv
      AUTHENTIK_POSTGRESQL__HOST: ${COMPOSE_PROJECT_NAME}-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-${COMPOSE_PROJECT_NAME}}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-${COMPOSE_PROJECT_NAME}}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - /srv/${COMPOSE_PROJECT_NAME}/media:/media
      - /srv/${COMPOSE_PROJECT_NAME}/custom-templates:/templates
    env_file:
      - stack.env
    depends_on:
      authentik-db:
        condition: service_healthy
      authentik-kv:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # Base domain
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-base.rule=Host(`auth.${COMPOSE_DOMAIN:?Compose FQDN missing}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-base.middlewares=${AUTHENTIK_CORS_MIDDLEWARE:-cors-allow-all@file}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-base.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-base.tls.certresolver=${CERT_RESOLVER:?Cert resolver name missing}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-base.service=${COMPOSE_PROJECT_NAME}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-base.entrypoints=http,https"
      # Additional domain
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-additional.rule=${AUTHENTIK_HOST_RULE:?Rule for additional endpoints missing}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-additional.middlewares=${AUTHENTIK_CORS_MIDDLEWARE:-cors-allow-all@file}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-additional.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-additional.tls.certresolver=${CERT_RESOLVER}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-additional.service=${COMPOSE_PROJECT_NAME}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-additional.entrypoints=http,https"
      # Service
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=9000"

  authentik-worker:
    container_name: ${COMPOSE_PROJECT_NAME}-worker
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-latest}
    restart: unless-stopped
    networks:
      - default
      - smtp
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: ${COMPOSE_PROJECT_NAME}-kv
      AUTHENTIK_POSTGRESQL__HOST: ${COMPOSE_PROJECT_NAME}-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-${COMPOSE_PROJECT_NAME}}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-${COMPOSE_PROJECT_NAME}}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /srv/${COMPOSE_PROJECT_NAME}/media:/media
      - /srv/${COMPOSE_PROJECT_NAME}/certs:/certs
      - /srv/${COMPOSE_PROJECT_NAME}/custom-templates:/templates
    env_file:
      - stack.env
    depends_on:
      authentik-db:
        condition: service_healthy
      authentik-kv:
        condition: service_healthy

networks:
  default:
    internal: true
  smtp:
    external: true
  proxy:
    external: true
